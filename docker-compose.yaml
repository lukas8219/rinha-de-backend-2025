version: '3.4'
services:
  app1: &app
    # image: lukas8219/rinha-be-2023-q3:latest
    build: .
    hostname: app1
    environment:
      MONGO_URI: "mongodb://mongo:27017/challenge?w=0&j=false"
      PROCESSOR_URL: "http://payment-processor-default:8080"
      FALLBACK_URL: "http://payment-processor-fallback:8080"
      CIRCUIT_BREAKER_THRESHOLD: "5"
      CIRCUIT_BREAKER_TIMEWINDOW: "15"
      CIRCUIT_BREAKER_REENABLE_AFTER: "5"
      AMQP_URL: "amqp://guest:guest@lavinmq:5672/"
    networks:
      - backend
      - payment-processor
    expose:
      - "3000"
    depends_on:
      lavinmq:
        condition: service_healthy
      mongo:
        condition: service_healthy

    ulimits:
      nproc: 1000000
      nofile:
        soft: 1000000
        hard: 1000000
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: '20MB'
  app2:
    <<: *app
    hostname: app2

  consumer:
    <<: *app
    hostname: consumer
    build:
      context: .
      dockerfile: Dockerfile.consumer

  lavinmq:
    image: cloudamqp/lavinmq:latest
    container_name: lavinmq
    healthcheck:
      test: ["CMD", "lavinmqctl", "status"]
      interval: 1s
      timeout: 1s
      retries: 10
      start_period: 2s
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: '35MB'

  # nettools:
  #   image: alpine:latest
  #   container_name: nettools
  #   command: /bin/sh -c "apk add --no-cache curl busybox-extras bind-tools iproute2 && sh"
  #   tty: true
  #   stdin_open: true
  #   networks:
  #     - backend
  #     - payment-processor
  #   depends_on:
  #     - app1
  #     - app2
  #   environment: {}
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.05'
  #         memory: '200MB'
  #   # You can exec into this container and use curl, ping, traceroute, telnet, dig, etc.
  #   # Example: docker-compose exec nettools sh
  #   # Then: curl http://app1:3000

  mongo:
    image: mongo:8.0
    container_name: mongo
    ports:
      - 27017:27017
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 1s
      timeout: 1s
      retries: 20
      start_period: 2s
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '150MB'

  nginx: # Load Balancer
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app1
      - app2
    ports:
      - "9999:9999"
    ulimits:
      nproc: 1000000
      nofile:
        soft: 1000000
        hard: 1000000
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: '35MB'

networks:
  backend:
    driver: bridge
  payment-processor:
    external: true